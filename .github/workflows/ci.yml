name: CI
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *' # run at 0 AM UTC
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build (mainly for CI testing)?'
        required: true
        default: "false"


jobs:
  repo-check:
    name: repository commit check
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: commit-check
        run: 'echo ::set-output name=has-commits::$(git --no-pager log --pretty=oneline --since="24 hours ago" | wc -l)'
    outputs:
      has-commits: ${{ steps.commit-check.outputs.has-commits }}

  build:
    runs-on: ubuntu-20.04
    needs: repo-check
    timeout-minutes: 480
    if: github.event_name != 'schedule' || needs.repo-check.outputs.has-commits > 0

    strategy:
      fail-fast: false
      matrix:
        platform: [rpi0, rpi2, rpi3, rpi4, tinkerboard, intelnuc, ova, oci_amd64, oci_arm64, oci_arm]
    
    steps:
    - uses: actions/checkout@v2

    - name: rename worker directory
      working-directory: ../
      run: |
        mv RaspberryMatic b
        ln -s b RaspberryMatic

    - name: setup env
      run: |
        echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "OCCU_VERSION=$(grep 'OCCU_VERSION =' buildroot-external/package/occu/occu.mk | cut -d' ' -f3 | cut -d'-' -f1)" >> $GITHUB_ENV
        echo "VERSION=$(grep 'OCCU_VERSION =' buildroot-external/package/occu/occu.mk | cut -d' ' -f3 | cut -d'-' -f1).$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "GITHUB_SHA7=$(echo ${GITHUB_SHA::7})" >> $GITHUB_ENV
        echo "FAKE_BUILDROOT_BUILD=${{ github.event.inputs.skip_build }}" >> $GITHUB_ENV

    - name: free disk space
      run: |
        df -h /
        sudo swapoff -a
        sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h /

    - name: cleanup old action artifacts
      run: .github/workflows/purge_artifacts.sh ${{ secrets.REPO_ACCESS_TOKEN }}

    - name: switch to experimental EULA files
      run: |
        mv -f release/updatepkg/raspmatic_rpi3/EULA.de_nightly release/updatepkg/raspmatic_rpi3/EULA.de
        mv -f release/updatepkg/raspmatic_rpi3/EULA.en_nightly release/updatepkg/raspmatic_rpi3/EULA.en

    #- name: remote debug tmate session
    #  uses: mxschmitt/action-tmate@v1
    #  if: matrix.platform == 'ova'

    - name: build raspmatic_${{ matrix.platform }}
      timeout-minutes: 480
      run: |
        sudo mkdir -p /mnt/download
        sudo chown runner /mnt/download
        make DATE=${{ env.DATE }} BR2_DL_DIR=/mnt/download raspmatic_${{ matrix.platform }}-release

    - name: ccu3 updatePkg generation
      if: matrix.platform == 'rpi3'
      run: |
        make DATE=${{ env.DATE }} BR2_DL_DIR=/mnt/download PRODUCT=raspmatic_${{ matrix.platform }} updatePkg
        mv release/raspmatic_${{ matrix.platform }}-${{ env.VERSION }}.tgz release/RaspberryMatic-${{ env.VERSION }}-ccu3.tgz
        ( cd release; sha256sum RaspberryMatic-${{ env.VERSION }}-ccu3.tgz >RaspberryMatic-${{ env.VERSION }}-ccu3.tgz.sha256 )

    - name: .ova copying
      if: matrix.platform == 'ova'
      run: |
        cp build-raspmatic_${{ matrix.platform }}/images/RaspberryMatic.ova release/RaspberryMatic-${{ env.VERSION }}.ova
        ( cd release; sha256sum RaspberryMatic-${{ env.VERSION }}.ova >RaspberryMatic-${{ env.VERSION }}.ova.sha256 )

    - name: cleanup raspmatic_${{ matrix.platform }}
      run: |
        make distclean

    - name: upload nightly build archive
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: release/RaspberryMatic-${{ env.VERSION }}-${{ matrix.platform }}.zip
        asset_name: RaspberryMatic-${{ env.OCCU_VERSION }}.$$-${{ matrix.platform }}.zip
        asset_content_type: application/zip
        max_releases: 1

    - name: upload nightly build checksum
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: release/RaspberryMatic-${{ env.VERSION }}-${{ matrix.platform }}.zip.sha256
        asset_name: RaspberryMatic-${{ env.OCCU_VERSION }}.$$-${{ matrix.platform }}.zip.sha256
        asset_content_type: text/plain
        max_releases: 1

    - name: upload nightly build archive (ccu3)
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus' && matrix.platform == 'rpi3'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: release/RaspberryMatic-${{ env.VERSION }}-ccu3.tgz
        asset_name: RaspberryMatic-${{ env.OCCU_VERSION }}.$$-ccu3.tgz
        asset_content_type: application/gzip
        max_releases: 1

    - name: upload nightly build checksum (ccu3)
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus' && matrix.platform == 'rpi3'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: release/RaspberryMatic-${{ env.VERSION }}-ccu3.tgz.sha256
        asset_name: RaspberryMatic-${{ env.OCCU_VERSION }}.$$-ccu3.tgz.sha256
        asset_content_type: text/plain
        max_releases: 1

    - name: upload nightly build archive (.ova)
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus' && matrix.platform == 'ova'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: release/RaspberryMatic-${{ env.VERSION }}.ova
        asset_name: RaspberryMatic-${{ env.OCCU_VERSION }}.$$.ova
        asset_content_type: application/gzip
        max_releases: 1

    - name: upload nightly build checksum (.ova)
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus' && matrix.platform == 'ova'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: release/RaspberryMatic-${{ env.VERSION }}.ova.sha256
        asset_name: RaspberryMatic-${{ env.OCCU_VERSION }}.$$.ova.sha256
        asset_content_type: text/plain
        max_releases: 1

    - name: upload nightly build checksum (oci deploy)
      if: github.event_name == 'schedule' && github.repository_owner == 'jens-maus' && matrix.platform == 'oci_amd64'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/jens-maus/RaspberryMatic/releases/22744592/assets{?name,label}
        release_id: 22744592
        asset_path: buildroot-external/board/oci/deploy.sh
        asset_name: RaspberryMatic-deploy-container-${{ env.OCCU_VERSION }}.sh
        asset_content_type: text/plain
        max_releases: 1

    - name: upload build as workflow artifact
      uses: actions/upload-artifact@v2
      with:
        path: release/RaspberryMatic-${{ env.VERSION }}-${{ matrix.platform }}.zip*
        name: RaspberryMatic-${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}-${{ matrix.platform }}.zip
      continue-on-error: true

    - name: upload build as workflow artifact (ccu3)
      if: github.event_name != 'schedule' && matrix.platform == 'rpi3'
      uses: actions/upload-artifact@v2
      with:
        path: release/RaspberryMatic-${{ env.VERSION }}-ccu3.tgz*
        name: RaspberryMatic-${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}-ccu3.tgz
      continue-on-error: true

    - name: upload build as workflow artifact (.ova)
      if: github.event_name != 'schedule' && matrix.platform == 'ova'
      uses: actions/upload-artifact@v2
      with:
        path: release/RaspberryMatic-${{ env.VERSION }}.ova*
        name: RaspberryMatic-${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}.ova
      continue-on-error: true

    - name: upload build as workflow artifact (oci deploy)
      if: github.event_name != 'schedule' && matrix.platform == 'ova'
      uses: actions/upload-artifact@v2
      with:
        path: buildroot-external/board/oci/deploy.sh
        name: RaspberryMatic-deploy-container-${{ env.OCCU_VERSION }}.sh
      continue-on-error: true

  oci-multiarch-build-push:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' #Cannot enable for PRs since secrets are not available ^^^

    steps:
    - uses: actions/checkout@v2

    - name: setup env
      run: |
        echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "OCCU_VERSION=$(grep 'OCCU_VERSION =' buildroot-external/package/occu/occu.mk | cut -d' ' -f3 | cut -d'-' -f1)" >> $GITHUB_ENV
        echo "VERSION=$(grep 'OCCU_VERSION =' buildroot-external/package/occu/occu.mk | cut -d' ' -f3 | cut -d'-' -f1).$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "GITHUB_SHA7=$(echo ${GITHUB_SHA::7})" >> $GITHUB_ENV

    - name: download oci_amd64.zip
      uses: actions/download-artifact@v2
      with:
        name: RaspberryMatic-${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}-oci_amd64.zip
    - name: download oci_arm64.zip
      uses: actions/download-artifact@v2
      with:
        name: RaspberryMatic-${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}-oci_arm64.zip
    - name: download oci_arm.zip
      uses: actions/download-artifact@v2
      with:
        name: RaspberryMatic-${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}-oci_arm.zip
    
    - name: extract artifacts
      run: |
        rm -rf oci_build
        mkdir -p oci_build
        cd oci_build
        for f in ../*.zip; do
          unzip -o $f
          rm $f
        done

    - name: Build tags
      shell: bash
      run: |
        BASE_TAG="ghcr.io/${{ github.repository_owner }}/raspberrymatic"
        UNIQUE_TAG="${BASE_TAG}:${{ env.VERSION }}-${{ env.GITHUB_SHA7 }}"
        if [[ ${GITHUB_EVENT_NAME} = 'schedule' || ${GITHUB_EVENT_NAME} = 'push' ]]; then
          BRANCH="${GITHUB_REF##*/}"
          if [ $BRANCH = master ]; then
            BRANCH_TAG="${BASE_TAG}:snapshot"
          else
            BRANCH_TAG="${BASE_TAG}:snapshot-${BRANCH}"
          fi
        fi
        echo "##[set-output name=unique_tag;]${UNIQUE_TAG}"
        echo "##[set-output name=branch_tag;]${BRANCH_TAG}"
      id: extract_branch

    - uses: docker/setup-buildx-action@v1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    
    - name: build and push container image
      uses: docker/build-push-action@v2
      id: docker_build
      with:
        context: oci_build
        file: buildroot-external/board/oci/Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm
        push: true
        build-args: |
          tar_prefix=RaspberryMatic-${{ env.VERSION }}-oci_
        tags: |
          ${{ steps.extract_branch.outputs.unique_tag }}
          ${{ steps.extract_branch.outputs.branch_tag }}
    
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
