--- occu/WebUI/www/webui/style.css.orig
+++ occu/WebUI/www/webui/style.css
@@ -736,6 +736,10 @@
   height: 30px;
 }
 
+.Filter_Active .FilterCaption {
+  color: red;
+}
+
 .FilterBtn {
   background-image:url(/ise/img/gradientButton25px.png);
 
--- occu/WebUI/www/webui/webui.js.orig
+++ occu/WebUI/www/webui/webui.js
@@ -6816,10 +6816,10 @@
   
   
   var m_name     = name;
-  var m_value    = "";
   var m_callback = callback;
   
   var m_id     = name.replace(/\,/g, "_");
+  var m_value    = localStorage.getItem(m_id) || "";
   var m_textId = m_id + "Text";
     
   var isSet = function()
@@ -6890,6 +6890,7 @@
   {
     if ($(m_textId)) { m_value = $(m_textId).value;}
     if ($(m_id))     { $(m_id).hide(); }
+    localStorage.setItem(m_id, $(m_textId).value);
     if (m_callback)  { m_callback(); }
   };
   
@@ -6930,7 +6931,6 @@
   /*# Initialisierung #*/
   /*###################*/
   
-  this.reset();
   
 };
 
@@ -6954,7 +6954,28 @@
     this.callback = callback;
     this.id       = name.replace(/\./g, "_");
     this.formId   = this.id + "Form";
-    this.reset();
+    var self = this;
+    function fltrHandler() {
+      self.restoreFilters();
+      eQ3.HomeMatic.Event.unsubscribe('DeviceListPageLoaded', fltrHandler);
+    }
+    eQ3.HomeMatic.Event.subscribe('DeviceListPageLoaded', fltrHandler);
+  },
+
+  restoreFilters: function() {
+    var filterValues = localStorage.getItem(this.id);
+    if(filterValues) {
+      try {
+        filterValues = JSON.parse(filterValues);
+        var values = $(this.formId).values;
+        for (var i = 0, len = values.length; i < len; i++) {
+         if(filterValues.indexOf(values[i].value) !== -1) {
+            values[i].checked = true;
+          }
+        }
+        this.set();
+      } catch(e) { console.log(e); }
+    }
   },
 
   /**
@@ -7065,13 +7086,17 @@
     if ($(this.formId))
     {
       var values = $(this.formId).values;
+      var filterValues = [];
 
       for (var i = 0, len = values.length; i < len; i++)
       {
         this.select(values[i].value, values[i].checked);
+        if(values[i].checked) filterValues.push(values[i].value);
       }
       
       if ($(this.id))    { $(this.id).hide(); }
+      // JSON.stringify encodes an array twice???
+      localStorage.setItem(this.id, JSON.parse(JSON.stringify(filterValues)));
       if (this.callback) { this.callback(); }
     }
   },
@@ -17930,6 +17955,7 @@
     translateJSTemplate("#DeviceListTable");
     translatePage(".j_rooms, .j_functions"); // this translates the room name as well the function name within the main devicelist (Settings > Devices)
     translateFilter(); // this translates the filter in the header of the page
+    eQ3.HomeMatic.Event.fire({type: 'DeviceListPageLoaded'});
   },
   
   onRemoveDevice: function(whatEver)
@@ -24270,11 +24296,31 @@
     if (file.substring(0, UI_PATH.length) == UI_PATH)
     {
       //method: 'get' ist für die ELV-CGIs notwendig.
-      opts = {evalScripts: true, method: 'get', onComplete:function(){iseRefr(true);bUpdateContentRunning=false;}};
+      opts = {
+        evalScripts: true,
+        method: 'get',
+        onComplete:function(){
+          iseRefr(true);
+          bUpdateContentRunning=false;
+          setTimeout(function() {
+            eQ3.HomeMatic.Event.fire({type:'ContentLoaded'});
+          }, 100);
+        }
+      };
     }
     else
     {
-      opts = {postBody: ReGa.encode(pb),evalScripts: true, onComplete:function(){iseRefr(true);bUpdateContentRunning=false;}};
+      opts = {
+        postBody: ReGa.encode(pb),
+        evalScripts: true,
+        onComplete:function(){
+          iseRefr(true);
+          bUpdateContentRunning=false;
+          setTimeout(function() {
+            eQ3.HomeMatic.Event.fire({type:'ContentLoaded'});
+          }, 100);
+        }
+      };
     }
     /* ELV --> */
     
@@ -27118,8 +27164,27 @@
     this.fltObjType = 0;
     if (fltObjType)
       this.fltObjType = fltObjType;
+
+    var self = this;
+    function fltrHandler() {
+      self.restoreFilters();
+      eQ3.HomeMatic.Event.unsubscribe('ContentLoaded', fltrHandler);
+    }
+    eQ3.HomeMatic.Event.subscribe('ContentLoaded', fltrHandler);
+  },
+
+  restoreFilters: function() {
+    try {
+      var iseSFilters = JSON.parse(localStorage.getItem('iseSFilters_' + this.pageID));
+      Object.keys(iseSFilters).forEach(function(id) {
+        var val = iseSFilters[id];
+        $(id).value = val;
+        $(id).nextSiblings()[0].click();
+      });
+    } catch(e) {
+      console.error(e);
+    }
   },
-  
 
   saveModeFilter: function(bModeStd, bModeSafe)
   {
@@ -27589,6 +27654,12 @@
 {
   //conInfo("iseFilter: setSFilter "+fId+" to "+$(ctrlId).value);
   fltObj.addStringFilter(fId, $(ctrlId).value);
+  try {
+    var iseFilters = JSON.parse(localStorage.getItem('iseSFilters_' + fltObj.pageID)) || {};
+    iseFilters[ctrlId] = $(ctrlId).value;
+    localStorage.setItem('iseSFilters_' + fltObj.pageID, JSON.stringify(iseFilters));
+    $(ctrlId).parentElement.previous().style.color = $(ctrlId).value ? 'red' : 'black';
+  } catch(e) { console.error(e); }
 };
 
 // Integer-Filter (Modus, Iface)
