#!/bin/tclsh

load tclrega.so

#*******************************************************************************
#* Sucht fertig konfigurierte Geräte und setzt deren Kanäle auf "fertig 
#* konfiguriert".
#*******************************************************************************
proc checkDevices { } {
  rega_script {
    string sId;
    foreach(sId, root.Devices().EnumUsedIDs())
    {
      var oDevice = dom.GetObject(sId);
      if (oDevice.ReadyConfig()) { oDevice.ReadyConfigChns(true); }
    }
  }
}

# List of default functions (german "Gewerke") that will be automatically generated
set FUNCTIONLIST {
  "funcLight"
  "funcHeating"
  "funcClimateControl"
  "funcWeather"
  "funcEnvironment"
  "funcSecurity"
  "funcLock"
  "funcButton"
  "funcCentral"
  "funcEnergy"
}

# List of default rooms that will be automatically generated
set ROOMLIST {
  "roomLivingRoom"
  "roomKitchen"
  "roomBedroom"
  "roomChildrensRoom1"
  "roomChildrensRoom2"
  "roomOffice"
  "roomBathroom"
  "roomGarage"
  "roomHWR"
  "roomGarden"
  "roomTerrace"
}

proc create_objects {collection enum_type names} {
  set ids [rega "dom.GetObject($collection).EnumIDs()"]
  set i 0

  foreach name $names {
    set id [lindex $ids $i]
    if { "$id" == "" } {
      #create object first
      set script "\
        var new_id = -1;\n\
        object o = dom.CreateObject( OT_ENUM, \"new object\" );\n\
        if( o ) \{\n\
          o.EnumType( $enum_type );\n\
          boolean res = dom.GetObject( $collection ).Add( o );\n\
          if( res ) \{\n\
            new_id = o.ID();\n\
          \} else \{\n\
            dom.DeleteObject( o.ID() );\n\
          \}\n\
        \}\
        "
      #puts "Executing $script"
      array set r [rega_script $script]
      set id $r(new_id)
      if { $id < 0 } {
        puts "Error creating object"
      }
    }

    rega "dom.GetObject($id).Name(\"[lindex $names $i]\")"
    rega "dom.GetObject($id).Enabled(true)"
    incr i
  }

  return [lsort [rega "dom.GetObject($collection).EnumUsedIDs()"]]
}

proc create_default_functions {} {
  global FUNCTIONLIST
  return [create_objects ID_FUNCTIONS etFunction $FUNCTIONLIST]
}

proc create_default_rooms {} {
  global ROOMLIST
  return [create_objects ID_ROOMS etRoom $ROOMLIST]
}

proc create_default_sysvars {} {
  rega_script {
    object sv=dom.CreateObject(OT_ALARMDP);
    if(sv != null) {
      sv.Name("${sysVarAlarmZone1}");
      sv.ValueType(ivtBinary);
      sv.ValueSubType(istAlarm);
      sv.ValueName0("${sysVarAlarmZone1NotTriggered}");
      sv.AddMetaData("trIDValue0", "sysVarAlarmZone1NotTriggered");
      sv.ValueName1("${sysVarAlarmZone1Triggered}");
      sv.AddMetaData("trIDValue1", "sysVarAlarmZone1Triggered");
      sv.ValueUnit("");
      sv.AlType(atSystem);
      sv.AlArm(true);
      sv.AlSetBinaryCondition();
      sv.Internal(false);
      sv.State(false);
      sv.DPInfo("${sysVarAlarmZone1Msg}");
      dom.GetObject(ID_SYSTEM_VARIABLES).Add(sv.ID());
      dom.RTUpdate(1);
    }

    sv=dom.GetObject(ID_PRESENT);
    if(sv != null) {
      sv.Name("${sysVarPresence}");
      sv.DPInfo("${sysVarPresenceMsg}");
      sv.ValueUnit("");
      sv.ValueName0("${sysVarPresenceNotPresent}");
      sv.ValueName1("${sysVarPresencePresent}");
      dom.GetObject(ID_SYSTEM_VARIABLES).Add(sv.ID());
    }

    sv=dom.GetObject(ID_GW_SYSALARM);
    if(sv != null) {
      sv.Name("${sysVarAlarmMessages}");
      sv.DPInfo("${sysVarAlarmMessagesCount}");
      sv.Internal(true);
      dom.GetObject(ID_SYSTEM_VARIABLES).Add(sv.ID());
    }

    sv=dom.GetObject(ID_GW_SYSSERVICE);
    if(sv != null) {
      sv.Name("${sysVarServiceMessages}");
      sv.DPInfo("${sysVarServiceMessagesCount}");
      sv.Internal(true);
      dom.GetObject(ID_SYSTEM_VARIABLES).Add(sv.ID());
    }
  }
}

proc create_default_objects {} {
  array set result [rega_script {
    string functions=dom.GetObject(ID_FUNCTIONS).EnumUsedIDs();
    string rooms=dom.GetObject(ID_ROOMS).EnumUsedIDs();
    string sysvars=dom.GetObject(ID_SYSTEM_VARIABLES).EnumUsedIDs();
  }]

  set ise_functions [lsort $result(functions)]
  if { [llength $ise_functions] == 0 } {
    puts "No functions defined, creating default functions"
    create_default_functions
  }

  if { [llength $result(rooms)] == 0 } {
    puts "No rooms defined, creating default rooms"
    create_default_rooms
  }

  if { [llength $result(sysvars)] == 0 } {
    puts "No system variables defined, creating default system variables"
    create_default_sysvars
  }
}

proc convert_byte2int_HSSDPs {} {
  rega_script {
    string sDP;
    foreach(sDP, dom.GetObject(ID_DATAPOINTS).EnumIDs()) {
      object obj = dom.GetObject(sDP.ToInteger());
      if((obj) && (obj.Type() == OT_HSSDP) && (obj.ValueType() == ivtByte)) {
        obj.ValueType(ivtInteger);
        obj.ValueSubType(istGeneric);
      }
    }
  }
}

proc fix_alarmDPs {} {
  rega_script {
    string sDP;
    foreach(sDP, dom.GetObject(ID_SYSTEM_VARIABLES).EnumIDs()) {
      object obj = dom.GetObject(sDP.ToInteger());
      if((obj) && (obj.Type() == OT_ALARMDP)) {
        object condition = obj.AlCondition();
        if(condition) {
          integer count = condition.CndSingleCount();
          if(count == 0) {
            ! the binary condition does not yet exist, so create it now
            obj.AlSetBinaryCondition();
          }
        }
      }
    }
  }
}

proc clear_sysvars {} {
  rega_script {
    object sv=dom.GetObject(ID_GW_SYSALARM);
    if(sv != null) {
      sv.Variable(0);
    }
    sv=dom.GetObject(ID_GW_SYSSERVICE);
    if(sv != null) {
      sv.Variable(0);
    }
  }
}

################################################################################
# Einsprungpunkt                                                               #
################################################################################

checkDevices
create_default_objects
convert_byte2int_HSSDPs
fix_alarmDPs
clear_sysvars
