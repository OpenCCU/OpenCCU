#!/bin/sh
#
# Startup script checking for RF capabale hardware
#

# function to identify rf hardware
identify_rf_hardware() {

  # setup default HM RF variables
  HM_MODE="NORMAL"
  HM_HMRF_DEV=""
  HM_HMRF_DEVNODE=""
  HM_HMIP_DEV=""
  HM_HMIP_DEVNODE=""

  # until we have a proper tool to identify the
  # type of the GPIO rf module we assume a RPI-RF-MOD
  # as soon as we have found a rx8130 RTC clock
  if [[ "${HM_RTC}" == "rx8130" ]]; then
    HM_HMRF_DEV="RPI-RF-MOD"
    HM_HMIP_DEV="RPI-RF-MOD"

    # setup the LEDs to show a constant yellow light
    echo default-on >/sys/class/leds/rpi_rf_mod\:green/trigger
    echo default-on >/sys/class/leds/rpi_rf_mod\:red/trigger
    echo none >/sys/class/leds/rpi_rf_mod\:blue/trigger
  else
    HM_HMRF_DEV="HM-MOD-RPI-PCB"
    HM_HMIP_DEV="HM-MOD-RPI-PCB"
  fi

  # set default HM_HOST_GPIO_UART
  if [[ -c /dev/raw-uart ]]; then
    HM_HOST_GPIO_UART="/dev/raw-uart"
  else
    # if no raw uart device is present we try to use the
    # hardware specific tty device
    case "${HM_HOST}" in

      # RaspberryPi
      rpi*)
        HM_HOST_GPIO_UART="/dev/ttyAMA0"
      ;;

      # ASUS Tinkerboard
      tinkerboard*)
        HM_HOST_GPIO_UART="/dev/ttyS1"
      ;;

    esac

    # also set tty device to low_latency mode (if possible)
    /bin/setserial ${HM_HOST_GPIO_UART} low_latency >/dev/null 2>&1
  fi

  # check if a HmIP-RFUSB (1b1f:c020) USB stick is connected
  # and set HMIP_DEV and HMIP_DEVNODE accordingly
  if lsusb | grep -q 1b1f:c020; then
    modprobe cp210x
    echo 1b1f c020 >/sys/bus/usb-serial/drivers/cp210x/new_id
    for i in $(find /sys/bus/usb/devices/usb*/ -name "ttyUSB*" -maxdepth 4); do
      DEVDIR=$(dirname $i)
      if [[ -f "${DEVDIR}/uevent" ]]; then
        if grep -q PRODUCT=1b1f/c020 ${DEVDIR}/uevent; then
          HM_HMIP_DEV="HMIP-RFUSB"
          HM_HMIP_DEVNODE=/dev/$(basename $i)
          break
        fi
      fi
    done
  fi

  # check if a HM-CFG-USB-2 (1b1f:c00f) USB stick is connected
  # and HMRF_DEV accordingly
  if lsusb | grep -q 1b1f:c00f; then
    HM_HMRF_DEV="HM-CFG-USB-2"
    HM_HMRF_SERIAL=$(cat /sys/bus/usb/devices/*/serial | grep -E '^[A-Z]{3}[0-9]{7}.*')
  fi

  # check if a HB-RF-USB (https://github.com/alexreinert/PCB/tree/master/HB-RF-USB)
  # is present and if yes, use /dev/raw-uart1 instead.
  if lsusb | grep -q 0403:6f70; then
    if [[ -c /dev/raw-uart1 ]]; then
      HM_HOST_GPIO_UART="/dev/raw-uart1"
    fi
  fi

  # check if we should boot in LAN gateway mode
  if [[ -e /usr/local/HMLGW ]]; then
    HM_MODE="HM-LGW"
  fi
}

# function to init rf hardware
init_rf_hardware() {
  # depending on the HomeMatic mode (HmRF, HmIP) we
  # have to load different kernel modules.
  if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
     [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] ||
     [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
     [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then

    if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
       [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]]; then
      if [[ -c "${HM_HOST_GPIO_UART}" ]]; then
        HM_HMRF_DEVNODE="${HM_HOST_GPIO_UART}"
      fi
    fi

    if [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] ||
       [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
      if [[ -c "${HM_HOST_GPIO_UART}" ]]; then
        HM_HMIP_DEVNODE="${HM_HOST_GPIO_UART}"
      fi
    fi

    # if we are using a HB-RF-USB with raw uart we make sure to
    # reset the rf module using the provided sysfs link.
    if [[ "${HM_HOST_GPIO_UART}" == "/dev/raw-uart1" ]]; then
      echo 1 >/sys/class/raw-uart/$(basename ${HM_HOST_GPIO_UART})/reset_radio_module
    else
      # identify which GPIO reset pin to drive
      if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
         [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then

        # depending on the host hardware we have to define different
        # reset pins
        case "${HM_HOST}" in
          # RaspberryPi
          rpi*)
            HM_HOST_GPIO_RESET=19  # GPIO19/GPIO.24 (pin 35)
          ;;

          # ASUS Tinkerboard
          tinkerboard*)
            HM_HOST_GPIO_RESET=185 # GPIO185/GPIO6A1 (pin 35)
          ;;
        esac
      else
        # depending on the host hardware we have to define different
        # reset pins
        case "${HM_HOST}" in
          # RaspberryPi
          rpi*)
            HM_HOST_GPIO_RESET=18  # GPIO18/GPIO.1 (pin 12)
          ;;

          # ASUS Tinkerboard
          tinkerboard*)
            HM_HOST_GPIO_RESET=184 # GPIO184/GPIO6A0 (pin 12)
          ;;
        esac
      fi

      # reset the GPIO rf module by switching its reset pin
      # and reset it to an input pin to get it floating again.
      if [[ -n "${HM_HOST_GPIO_RESET}" ]]; then
        echo ${HM_HOST_GPIO_RESET} >/sys/class/gpio/export
        echo out >/sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/direction
        echo 0 >/sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/value
        sleep 0.1
        echo 1 >/sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/value
        sleep 0.1
        echo in >/sys/class/gpio/gpio${HM_HOST_GPIO_RESET}/direction
      fi
    fi
  fi
}

# function to read out the serial, version and address of the corresponding
# rf module
query_rf_parameters() {

  # here we query for certain different information to identify
  # which RF module is installed and which protocols it actually
  # supports.

  # 1. query for HM-MOD-RPI-PCB parameters
  if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
     [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then

    # use eq3configcmd to query for the default rf address and if it is empty
    # or 0x00ffff there is either no HM-MOD-RPI-PCB or it is a RPI-RF-MOD
    RF_ADDRESS=$(/bin/eq3configcmd read-default-rf-address -f ${HM_HOST_GPIO_UART} -h 2>&1 | grep "^0x" | tr -d '[:space:]')
    if [[ -n "${RF_ADDRESS}" ]] && [[ "${RF_ADDRESS}" != "0x00ffff" ]]; then
      RF_SGTIN=$(/bin/eq3configcmd update-coprocessor -p ${HM_HOST_GPIO_UART} -t HM-MOD-UART -c -sg 2>&1 | sed -n 's/.*SGTIN: \([0-9A-Fa-f]\{24\}\).*/\1/p')
      RF_SERIAL=$(/bin/eq3configcmd update-coprocessor -p ${HM_HOST_GPIO_UART} -t HM-MOD-UART -c -se 2>&1 | grep "SerialNumber:" | cut -d' ' -f5 | tr -d '[:space:]')
      RF_VERSION=$(/bin/eq3configcmd update-coprocessor -p ${HM_HOST_GPIO_UART} -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5 | tr -d '[:space:]')

      if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
        HM_HMRF_SERIAL=${RF_SERIAL}
        HM_HMRF_VERSION=${RF_VERSION}
        HM_HMRF_ADDRESS=${RF_ADDRESS}
      fi

      if [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then
        HM_HMIP_SERIAL=${RF_SERIAL}
        HM_HMIP_VERSION=${RF_VERSION}
        HM_HMIP_ADDRESS=${RF_ADDRESS}
        HM_HMIP_SGTIN=${RF_SGTIN}
      fi
    else
      # if we haven't identified a HM-MOD-RPI-PCB we try to find
      # a RPI-RF-MOD next
      if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
        if [[ "${RF_ADDRESS}" == "0x00ffff" ]]; then
          HM_HMRF_DEV="RPI-RF-MOD"
        else
          HM_HMRF_DEV=
        fi
        HM_HMRF_SERIAL=
        HM_HMRF_VERSION=
        HM_HMRF_ADDRESS=
      fi

      if [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then
        if [[ "${RF_ADDRESS}" == "0x00ffff" ]]; then
          HM_HMIP_DEV="RPI-RF-MOD"
        else
          HM_HMIP_DEV=
        fi
        HM_HMIP_SERIAL=
        HM_HMIP_VERSION=
        HM_HMIP_ADDRESS=
        HM_HMIP_SGTIN=
      fi
    fi

  fi

  # 2. query for RPI-RF-MOD parameters
  if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
     [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then

    # use hmip-copro-update only to query all rf module related info (eq3configcmd is not supported for RPI-RF-MOD)
    RF_INFO=$(/opt/java/bin/java -Dgnu.io.rxtx.SerialPorts=${HM_HOST_GPIO_UART} -jar /opt/HmIP/hmip-copro-update.jar -p ${HM_HOST_GPIO_UART} -v -a 2>&1)
    RF_SGTIN=$(echo ${RF_INFO} | sed -n 's/.*SGTIN = \([0-9A-Fa-f]\{24\}\).*/\1/p')
    RF_VERSION=$(echo ${RF_INFO} | sed -n 's/.*Application version = \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
    RF_ADDRESS=$(echo ${RF_INFO} | sed -n 's/.*Radio address = \([0-9A-F]\{6\}\).*/0x\1/p')

    if [[ -n "${RF_ADDRESS}" ]] || [[ -n "${RF_SGTIN}" ]]; then
      # use the last 10 chars of the SGTIN as the serial number of the rf module
      RF_SERIAL=$(echo -n ${RF_SGTIN} | tail -c 10)

      if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]]; then
        HM_HMRF_SERIAL=${RF_SERIAL}
        HM_HMRF_VERSION=${RF_VERSION}
        HM_HMRF_ADDRESS=${RF_ADDRESS}
      fi

      if [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
        HM_HMIP_SERIAL=${RF_SERIAL}
        HM_HMIP_VERSION=${RF_VERSION}
        HM_HMIP_ADDRESS=${RF_ADDRESS}
        HM_HMIP_SGTIN=${RF_SGTIN}
      fi
    else
      if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]]; then
        HM_HMRF_DEV=
        HM_HMRF_SERIAL=
        HM_HMRF_VERSION=
        HM_HMRF_ADDRESS=
      fi

      if [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
        HM_HMIP_DEV=
        HM_HMIP_SERIAL=
        HM_HMIP_VERSION=
        HM_HMIP_ADDRESS=
        HM_HMIP_SGTIN=
      fi
    fi
  fi

  # query HMIP-RFUSB parameters if used
  if [[ "${HM_HMIP_DEV}" == "HMIP-RFUSB" ]]; then
    # run hmip-copro-update to query info and get copro into app mode
    RF_INFO=$(/opt/java/bin/java -Dgnu.io.rxtx.SerialPorts=${HM_HMIP_DEVNODE} -jar /opt/HmIP/hmip-copro-update.jar -p ${HM_HMIP_DEVNODE} -v -a 2>&1)
    RF_SGTIN=$(echo ${RF_INFO} | sed -n 's/.*SGTIN = \([0-9A-Fa-f]\{24\}\).*/\1/p')

    # use the last 10 chars of the SGTIN as the serial number of the rf module
    RF_SERIAL=$(echo -n ${RF_SGTIN} | tail -c 10)
    if [[ -n "${RF_SERIAL}" ]]; then
      RF_VERSION=$(echo ${RF_INFO} | sed -n 's/.*Application version = \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
      RF_ADDRESS=$(echo ${RF_INFO} | sed -n 's/.*Radio address = \([0-9A-F]\{6\}\).*/0x\1/p')

      if [[ "${RF_SGTIN}" =~ "3014f5ac94" ]]; then
        HM_HMIP_DEV="HMIP-RFUSB-TK"
      fi

      HM_HMIP_SERIAL=${RF_SERIAL}
      HM_HMIP_VERSION=${RF_VERSION}
      HM_HMIP_ADDRESS=${RF_ADDRESS}
      HM_HMIP_SGTIN=${RF_SGTIN}
    else
      HM_HMIP_DEV=
      HM_HMIP_SERIAL=
      HM_HMIP_VERSION=
      HM_HMIP_ADDRESS=
      HM_HMIP_SGTIN=
    fi
  fi

  # save all info about the RF module
  if [[ -n "${HM_HMRF_SERIAL}" ]]; then
    echo "${HM_HMRF_SERIAL}" >/var/board_serial
    echo "${HM_HMRF_VERSION}" >/var/rf_firmware_version
    echo "${HM_HMRF_ADDRESS}" >/var/rf_address
  elif [[ -n "${HM_HMIP_SERIAL}" ]]; then
    echo "${HM_HMIP_SERIAL}" >/var/board_serial
    echo "${HM_HMIP_VERSION}" >/var/rf_firmware_version
    echo "${HM_HMIP_ADDRESS}" >/var/rf_address
  else
    echo "" >/var/board_serial
    echo "" >/var/rf_firmware_version
    echo "" >/var/rf_address
  fi

  if [[ -n "${HM_HMIP_SERIAL}" ]]; then
    echo "${HM_HMIP_SERIAL}" >/var/hmip_board_serial
    echo "${HM_HMIP_VERSION}" >/var/hmip_firmware_version
    echo "${HM_HMIP_ADDRESS}" >/var/hmip_address
    if [[ -n "${HM_HMIP_SGTIN}" ]]; then
      echo "${HM_HMIP_SGTIN}" >/var/board_sgtin
      echo "${HM_HMIP_SGTIN}" >/var/hmip_board_sgtin
    fi
  fi
}

start() {
  echo -n "Identifying Homematic RF-Hardware: "

  # source all data from /var/hm_mode
  [[ -r /var/hm_mode ]] && . /var/hm_mode

  identify_rf_hardware
  init_rf_hardware
  query_rf_parameters

  # save all HM_ env variables
  set | grep '^HM_' >/var/hm_mode

  # output some status information
  echo -n "BidCos-RF: "
  [[ -n "${HM_HMRF_DEV}" ]] && echo -n "${HM_HMRF_DEV}, " || echo -n "none, "
  echo -n "HmIP: "
  [[ -n "${HM_HMIP_DEV}" ]] && echo -n "${HM_HMIP_DEV}, " || echo -n "none, "
  echo "OK"
}

restart() {
  start
}

case "$1" in
  start)
    start
  ;;
  stop)
    # nothing
  ;;
  restart|reload)
    restart
  ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
