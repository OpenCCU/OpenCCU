#!/bin/sh
# shellcheck shell=dash disable=SC2169 source=/dev/null
#
# Startup script to ensure we have a valid filesystem
#

init_system() {

  CFG_TEMPLATE_DIR=/etc/config_templates

  # general umask so that we will have rwrw--
  umask 0002

  # ensure some pathes are there and have
  # correct permissions
  mkdir -p /var/log
  mkdir -p /var/tmp
  mkdir -p /var/rega
  mkdir -p /var/run
  mkdir -p /var/spool
  mkdir -p /var/lock
  mkdir -p /var/cache
  mkdir -p /var/lib
  mkdir -p /var/lib/misc
  mkdir -p /var/lib/dbus 2>/dev/null
  mkdir -p /var/empty
  mkdir -p /var/etc
  mkdir -p /var/status
  mkdir -p /var/empty
  chmod 0700 /var/empty

  if [[ "${HM_HOST}" == "oci" ]]; then

    DEV_HOST="/dev_host"
    if [ -d "${DEV_HOST}" ]; then
      # To avoid sharing the whole host /dev with container it is mounted in a /dev_host
      # This means we have to manually symlink the dynamic devices
      for device in mmd_bidcos mmd_hmip usb; do
        ln -s "${DEV_HOST}/${device}" "/dev/${device}" 
      done
    fi

    HOME_ASSISTANT_ADDON_DATA="/data"
    if [ -n "${RUNNING_IN_HA}" ] && [ -f "${HOME_ASSISTANT_ADDON_DATA}/options.json" ]; then
      # Home Assistant expects persinstent data to be stored in /data
      echo "Storing user data in ${HOME_ASSISTANT_ADDON_DATA} (Home Assistant Add-On)"
      mount -o bind ${HOME_ASSISTANT_ADDON_DATA} /usr/local
    fi

  fi

  # create /media/usbX directories for automounting USB devices
  for i in $(seq 1 8); do
    mkdir -p "/media/usb${i}"
  done

  # /usr/local/etc setup
  mkdir -p /usr/local/etc
  chmod 0755 /usr/local/etc
  chown root:root /usr/local/etc

  # create a /usr/local/tmp directory for creating things like backup files, etc.
  # (we need it on-disk or /tmp will be not enough in case of a filled up /usr/local)
  if [[ ! -f /usr/local/tmp/.nobackup ]]; then
    mkdir -p /usr/local/tmp
    touch /usr/local/tmp/.nobackup
  fi
  # remove everything but keep dotfiles (e.g. '.nobackup')
  rm -rf /usr/local/tmp/*

  # make sure /usr/local/etc/config and
  # /usr/local/etc/config/firmware exists
  mkdir -p /usr/local/etc/config/firmware
  chmod 0775 /usr/local/etc/config

  # make sure the timezone setup is fine
  if [[ ! -e /etc/config/TZ ]]; then
    cp -a ${CFG_TEMPLATE_DIR}/TZ /etc/config/
  fi

  # update /etc/config/localtime and /etc/config/timezone
  /bin/updateTZ.sh

  if [[ "${HM_HOST}" != "oci" ]]; then
    # if /etc/config/timezone is set to Europe/Berlin we
    # assume a german keyboard layout
    if [[ $(cat /etc/config/timezone) == "Europe/Berlin" ]]; then
      /sbin/loadkmap </etc/de.kmap
    fi
  fi

  # if no network config is present we make sure to put a template file
  # there
  if [[ ! -e /etc/config/netconfig ]] ; then
    cp -a ${CFG_TEMPLATE_DIR}/netconfig /etc/config/
  fi

  # if no shadow file with password information is in place we have to
  # put the template file there.
  if [[ ! -s /etc/config/shadow ]] ; then
    cp -a ${CFG_TEMPLATE_DIR}/shadow /etc/config/
  fi

  # load bcm2835 watchdog kernel module if this is
  # a raspberrypi
  if echo "${HM_HOST}" | grep -q rpi; then
    modprobe bcm2835_wdt nowayout=1 heartbeat=15
  fi

  if [[ "${HM_HOST}" != "oci" ]]; then
    # load tunneling interface support
    modprobe tun
  fi

  # if the userfs is located on a non-mmc device (not on a SD card)
  # we can safely use the old /usr/local/sdcard directory path as
  # the general storagePath for diagrams and daily backups
  storagePath=""
  if grep " /usr/local " /proc/mounts | grep -qv "^/dev/mmc"; then
    storagePath="/usr/local/sdcard"
    mkdir -p ${storagePath}
  fi

  # users can override the storagePath by specifying an own storage
  # path in /etc/config/CustomStoragePath
  if [[ -f /etc/config/CustomStoragePath ]]; then
    storagePath=$(cat /etc/config/CustomStoragePath)
  fi

  # in case a storagePath is specified we make sure it is setup
  # correct and in case it is empty or does not exist we skip this
  # so that the WebUI will remind users to insert an USB drive for
  # storing diagrams+backups
  if [[ -n "${storagePath}" ]] && [[ -d "${storagePath}" ]]; then
    if [[ ! -d "${storagePath}/measurement" ]]; then
      mkdir -p "${storagePath}/measurement"
    fi
    if [[ ! -e "${storagePath}/.nobackup" ]]; then
      touch "${storagePath}/.nobackup"
    fi
    ln -sf "${storagePath}" /media/usb0
    touch /var/status/SDinitialised
    touch /var/status/hasSD
  fi
}

start() {
  echo -n "Initializing System: "

  # source all data from /var/hm_mode
  [[ -r /var/hm_mode ]] && . /var/hm_mode

  # call rc.init before initializing the system
  if [[ ! -e /etc/config/safemode ]]; then
    if [[ -x /usr/local/etc/rc.init ]]; then
      /usr/local/etc/rc.init
    fi
  fi

  # make sure the system is properly initialized
  init_system

  # start hss_led if it exists
  if [[ -x /bin/hss_led ]]; then
    start-stop-daemon -S -q -b -m -p /var/run/hss_led.pid --exec /bin/hss_led -- -l 6
  fi

  # call rc.postinit after init of system is finished
  if [[ ! -e /etc/config/safemode ]]; then
    if [[ -x /usr/local/etc/rc.postinit ]]; then
      /usr/local/etc/rc.postinit
    fi
  fi

  # save all HM_ env variables
  set | grep '^HM_' >/var/hm_mode

  echo "OK"
}

stop() {
  echo -n "Cleaning up System: "

  if [[ -f /var/run/hss_led.pid ]]; then
    start-stop-daemon -K -q -p /var/run/hss_led.pid
  fi

  echo "OK"
}

restart() {
  stop
  start
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart|reload)
    restart
  ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
