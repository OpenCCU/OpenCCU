#!/bin/sh

# source all data from /var/hm_mode
[[ -r /var/hm_mode ]] && . /var/hm_mode

# signal that we are about to setup the network
# connection using a slow blinking blue LED
if [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
   [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
  echo none >/sys/class/leds/rpi_rf_mod\:green/trigger
  echo none >/sys/class/leds/rpi_rf_mod\:red/trigger
  echo timer >/sys/class/leds/rpi_rf_mod\:blue/trigger
  echo 499 >/sys/class/leds/rpi_rf_mod\:blue/delay_on
  echo 499 >/sys/class/leds/rpi_rf_mod\:blue/delay_off
fi

# performance tuning to reduce TCP performance spikes
/sbin/sysctl -w net.ipv4.tcp_timestamps=0 >/dev/null 2>&1 || true

# we exit if if-up.d is called for "lo"
if [[ "${IFACE}" == "lo" ]]; then
  exit 0
fi

echo -n "${IFACE}:"

# only continue if this network interface exists
if [[ ! -L "/sys/class/net/${IFACE}" ]]; then
  echo -n " missing, "
  exit 1
fi

# only continue if another interface hasn't
# setup everything correctly already
if [[ -e /var/status/hasIP ]]; then
  /sbin/ip link set ${IFACE} down
  echo -n " disabled, "

  # make sure that the wifi power is disabled
  # if not required
  case "${IFACE}" in
    wlan*)
      /usr/sbin/rfkill block wlan
    ;;
  esac
  exit 0
fi

# start WPA Supplicant if this is a WiFi connection
case "${IFACE}" in
  eth*)
    # wait until the link is up
    /sbin/ip link set ${IFACE} up
    i=0
    while [[ "$(cat /sys/class/net/${IFACE}/carrier)" == "0" ]]; do
      sleep 2
      i=$(($i+1))
      if [[ $i -ge 6 ]]; then
        break
      fi
      echo -n "."
    done

    # if the link is not up we don't continue
    if [[ "$(cat /sys/class/net/${IFACE}/carrier)" == "0" ]]; then
      /sbin/ip link set ${IFACE} down
      echo -n ", no link, "
      exit 1
    fi
  ;;

  wlan*)
    if [[ -e /etc/config/wpa_supplicant.conf ]]; then
      /sbin/ip link set ${IFACE} up
      sleep 5
      /usr/sbin/rfkill unblock wlan
      /usr/sbin/wpa_supplicant -B w -i ${IFACE} -c /etc/config/wpa_supplicant.conf -s
    else
      echo -n " no config, "
      # make sure that the wifi power is disabled
      # if not required
      /usr/sbin/rfkill block wlan
      exit 1
    fi
  ;;
esac

echo -n " up, "

# cleanup first
RESOLV_CONF=/var/etc/resolv.conf
rm -f "${RESOLV_CONF}"
mkdir -p /var/status
rm -f /var/status/hasLink
rm -f /var/status/hasIP
rm -f /var/status/hasInternet

# source in the network config
[[ -r /etc/config/netconfig ]] && . /etc/config/netconfig

# setup the hostname
echo "${HOSTNAME}" >/etc/hostname
hostname "${HOSTNAME}"

# setup /etc/hosts
echo "127.0.0.1 localhost" >/etc/hosts
echo "127.0.1.1 ${HOSTNAME}" >>/etc/hosts

# restart syslogd to update hostname
/etc/init.d/S07logging restart 2>/dev/null >/dev/null

# check if we booting via nfs
if grep -q nfsroot /proc/cmdline ; then
   echo Running from nfs root. Skipping network configuration.

   # has IP  
   touch /var/status/hasLink
   touch /var/status/hasIP

   # check internet connection; use fix ip to google because no nameserver (nfs boot)
   /bin/checkInternet

   exit 0
fi

# make sure no other udhcpc is running
killall -q udhcpc

# if DHCP is enabled we run udhcpc
case "${MODE}" in

  # if DHCP is enabled we "only" run udhcpc
  DHCP)
    echo -n "dhcp, "

    /sbin/udhcpc -b -t 100 -T 3 -S -x hostname:${HOSTNAME} -i ${IFACE} -F ${HOSTNAME} -V eQ3-CCU3 -s /bin/dhcp.script -p /var/run/udhcpc_${IFACE}.pid 2>/dev/null >/dev/null
    if [[ ! -f "/var/run/udhcpc_${IFACE}.pid" ]]; then
      killall checkDHCP
      /bin/checkDHCP ${IFACE} &
    fi
  ;;

  # everything else means we are setting a static IP
  *)
    echo -n "static, "

    # we checked the link state already way earlier
    touch /var/status/hasLink

    # use ifconfig so that broadcast address is correctly calculated
    /sbin/ifconfig ${IFACE} ${IP} netmask ${NETMASK}

    # reset default gateway
    /sbin/ip route del default 2>/dev/null
    /sbin/ip route add default via ${GATEWAY}

    if [[ -n "${NAMESERVER1}" ]]; then
      echo nameserver "${NAMESERVER1}" >>${RESOLV_CONF}
    fi

    if [[ -n "${NAMESERVER2}" ]]; then
      echo nameserver "${NAMESERVER2}" >>${RESOLV_CONF}
    fi

    # update CURRENT_XYZ in /etc/config/netconfig

    # update /etc/config/netconfig
    eq3configcmd netconfigcmd -i ${IP} -g ${GATEWAY} -n ${NETMASK}

    if [[ -n "${NAMESERVER1}" ]]; then
      eq3configcmd netconfigcmd -d1 ${NAMESERVER1}
    else
      eq3configcmd netconfigcmd -d1 ""
    fi

    if [[ -n "${NAMESERVER2}" ]]; then
      eq3configcmd netconfigcmd -d2 ${NAMESERVER2}
    else
      eq3configcmd netconfigcmd -d2 ""
    fi

    touch /var/status/hasIP

    # check internet connection
    /bin/checkInternet
  ;;

esac

# init the firewall only in case
# we are in normal startup mode
if [[ "${HM_MODE}" == "NORMAL" ]]; then
  # set firewall rules
  /bin/setfirewall.tcl
  echo -n "firewall, "
fi

IP=$(ip -4 route get 1 | head -1 | cut -d' ' -f8 | tr -d '\n')
echo -n "${IP}, "

exit 0
